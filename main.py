from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
import logging
from datetime import datetime
from calendar import monthrange
import os
from dotenv import load_dotenv

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("8309361791:AAFkMAUHPljHFbVxToFSdJeq4i3YA2OgikY")
ADMIN_CHAT_ID = os.getenv("1436846209")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    START, NAME, SURNAME_OR_NICKNAME, 
    MESSAGE, SOURCE, APPROVAL,
    SCHEDULE_DATE, CONFIRM_DATE
) = range(8)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
def generate_calendar(year: int = None, month: int = None) -> InlineKeyboardMarkup:
    now = datetime.now()
    if not year or not month:
        year, month = now.year, now.month
    
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–º–µ—Å—è—Ü + –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
    month_name = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", 
                 "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"][month-1]
    header = [
        InlineKeyboardButton("‚óÄ", callback_data=f"prev_{year}_{month}"),
        InlineKeyboardButton(f"{month_name} {year}", callback_data="ignore"),
        InlineKeyboardButton("‚ñ∂", callback_data=f"next_{year}_{month}")
    ]
    keyboard.append(header)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    _, days_in_month = monthrange(year, month)
    first_weekday = datetime(year, month, 1).weekday()
    
    days = []
    # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞
    days.extend([InlineKeyboardButton(" ", callback_data="ignore")] * first_weekday)
    
    for day in range(1, days_in_month + 1):
        date = datetime(year, month, day)
        if date.date() < now.date():
            days.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            days.append(InlineKeyboardButton(str(day), callback_data=f"day_{year}_{month}_{day}"))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 7 –¥–Ω–µ–π
    for i in range(0, len(days), 7):
        keyboard.append(days[i:i+7])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É", callback_data="confirm_date")])
    
    return InlineKeyboardMarkup(keyboard)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: CallbackContext) -> int:
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–∫—Ä–µ—Ç–∞—Ä—å *YAG_ARTEM*.\n\n"
        "üìù –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π —Å –Ω–∏–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n"
        "üîé –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–π–¥—ë—à—å –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ç–µ–±–µ –Ω–∞–∑–Ω–∞—á–∞—Ç –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
        "*–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:*"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown")
    return NAME

async def get_name(update: Update, context: CallbackContext) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üîπ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–∏–∫:")
    return SURNAME_OR_NICKNAME

async def get_surname_or_nickname(update: Update, context: CallbackContext) -> int:
    context.user_data["surname_or_nickname"] = update.message.text
    await update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è YAG_ARTEM:")
    return MESSAGE

async def get_message(update: Update, context: CallbackContext) -> int:
    context.user_data["message"] = update.message.text
    await update.message.reply_text("üîç –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª(–∞) –æ–± —ç—Ç–æ–º –±–æ—Ç–µ/YAG_ARTEM?")
    return SOURCE

async def get_source(update: Update, context: CallbackContext) -> int:
    context.user_data["source"] = update.message.text
    user = update.message.from_user

    application_text = (
        "üìÑ *–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞*\n\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üîñ –§–∞–º–∏–ª–∏—è/–ù–∏–∫: {context.user_data['surname_or_nickname']}\n"
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {context.user_data['message']}\n"
        f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {context.user_data['source']}\n\n"
        f"üÜî ID: {user.id}\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: @{user.username if user.username else '–Ω–µ—Ç'}"
    )

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=application_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")
            ]
        ])
    )

    await update.message.reply_text(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        "–Ø —Å–æ–æ–±—â—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç."
    )
    return ConversationHandler.END

async def admin_decision(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    action, applicant_id = query.data.split("_")
    applicant_id = int(applicant_id)

    if action == "approve":
        context.user_data["applicant_id"] = applicant_id
        await query.edit_message_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=generate_calendar()
        )
    elif action == "reject":
        await context.bot.send_message(
            chat_id=applicant_id,
            text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        await query.edit_message_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

async def handle_calendar_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data
    now = datetime.now()
    
    if data.startswith("prev_") or data.startswith("next_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
        _, year, month = data.split("_")
        year, month = int(year), int(month)
        
        if data.startswith("prev_"):
            if month == 1:
                month = 12
                year -= 1
            else:
                month -= 1
        else:
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
                
        await query.edit_message_reply_markup(
            reply_markup=generate_calendar(year, month)
        )
    
    elif data.startswith("day_"):
        # –í—ã–±–æ—Ä –¥–Ω—è
        _, year, month, day = data.split("_")
        context.user_data["selected_date"] = f"{day}.{month}.{year}"
        await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {day}.{month}.{year}")
    
    elif data == "confirm_date":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
        if "selected_date" not in context.user_data:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!")
            return
            
        selected_date = context.user_data["selected_date"]
        applicant_id = context.user_data["applicant_id"]
        
        await context.bot.send_message(
            chat_id=applicant_id,
            text=f"üìÖ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –Ω–∞ *{selected_date}*\n\n–ñ–¥—ë–º –≤–∞—Å!",
            parse_mode="Markdown"
        )
        
        await query.edit_message_text(
            f"‚úÖ –î–∞—Ç–∞ {selected_date} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
            reply_markup=None
        )

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME_OR_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname_or_nickname)],
            MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_source)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(admin_decision, pattern=r"^(approve|reject)_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_calendar_selection))
    
    application.run_polling()

if __name__ == "__main__":
    main()